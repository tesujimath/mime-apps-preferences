#!/usr/bin/env python
#
# Copyright 2015 Simon Guest
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys

import Tkinter
import tkMessageBox

def strip_end(text, suffix):
    """Remove the suffix from the end of string, if possible."""
    if not text.endswith(suffix):
        return text
    return text[:len(text)-len(suffix)]

def app_id_from_desktop_basename(desktop_basename):
    return strip_end(desktop_basename, ".desktop")

def get_xdg(selector):
    """Return the value(s) of the selected XDG location, with fallback to defaults."""
    xdg_dirs = {
        "XDG_DATA_HOME": {
            "default": os.path.expanduser("~/.local/share"),
            "resultfn": lambda x: x
        },
        "XDG_CONFIG_HOME": {
            "default": os.path.expanduser("~/.config"),
            "resultfn": lambda x: x
        },
        "XDG_DATA_DIRS": {
            "default": "/usr/local/share/:/usr/share/",
            "resultfn": lambda x: x.split(":")
        },
        "XDG_CONFIG_DIRS": {
            "default": "/etc/xdg",
            "resultfn": lambda x: x.split(":")
        },
    }
    s = os.getenv(selector)
    if not s:
        s = xdg_dirs[selector]["default"]
    return xdg_dirs[selector]["resultfn"](s)

def get_system_mimeapps_list_files():
    result = []
    def append_result_if_exists(dir, file):
        candidate_path = os.path.join(dir, file)
        if os.path.exists(candidate_path):
            print("found %s " % candidate_path)
            result.append(candidate_path)
        else:
            print("skipping %s" % candidate_path)
    xdg_current_desktop = os.getenv("XDG_CURRENT_DESKTOP")
    if xdg_current_desktop is not None:
        desktops = xdg_current_desktop.split(":")
    else:
        desktops = []
    for dir in get_xdg("XDG_CONFIG_DIRS") + \
        [os.path.join(x, "applications") for x in get_xdg("XDG_DATA_DIRS")]:
        for desktop in desktops:
            append_result_if_exists(dir, desktop + "-mimeapps.list")
        append_result_if_exists(dir, "mimeapps.list")
    return result

class Observable:
    def __init__(self):
        self._observers = {}     # list of callbacks, by selector (string)

    def observe(self, selector, callbackfn):
        if not self._observers.has_key(selector):
            self._observers[selector] = []
        self._observers[selector].append(callbackfn)
        # notify initial state
        callbackfn()

    def notify(self, selector):
        if self._observers.has_key(selector):
            for callbackfn in self._observers[selector]:
                callbackfn()

class App:
    """An application, with info from its desktop entry."""
    def __init__(self, desktop_dir, desktop_basename):
        self._desktop_basename = desktop_basename
        self._id = app_id_from_desktop_basename(desktop_basename)
        attr = {}
        section = "<nosection>"
        line_number = 0
        with open(os.path.join(desktop_dir, desktop_basename)) as f:
            for line in f:
                line_number += 1
                line = line.strip()
                if line.startswith("["):
                    #print("%s: skip header: %s" % (desktop_basename, line))
                    section = line.lstrip("[").rstrip("]")
                elif line.startswith("#"):
                    #print("%s: skip comment: %s" % (desktop_basename, line))
                    pass
                elif line == "":
                    #print("%s: skip empty: %s." % (desktop_basename, line))
                    pass
                else:
                    tokens = line.split("=", 1)
                    if len(tokens) == 2:
                        if tokens[0] in ["Type", "Name", "MimeType"] and section == "Desktop Entry":
                            attr[tokens[0]] = tokens[1]
                    else:
                        sys.stderr.write("ignoring weird line at %s:%d %s\n" % (desktop_basename, line_number, line))
        if attr.has_key("Type"):
            self._type = attr["Type"]
        else:
            self._type = "<unknown>"
        if attr.has_key("Name"):
            self._name = attr["Name"]
        else:
            self._name = "<unknown>"
        if attr.has_key("MimeType"):
            self._mime_types = set(attr["MimeType"].rstrip(";").split(";"))
        else:
            self._mime_types = set()

    def __str__(self):
        """Need the name *and* the id, for those apps with stupid names (hello gpicview)."""
        return "%s (%s)" % (self._name, self._id)

    def type(self):
        return self._type

    def id(self):
        return self._id

    def desktop_basename(self):
        return self._desktop_basename

    def name(self):
        return self._name

    def mime_types(self):
        return self._mime_types

    def n_mime_types(self):
        return len(self._mime_types)

    def print_summary(self):
        print("%s: %d mime types" % (self.id(), self.n_mime_types()))

class AppMimetype:
    """A pair (app, mime-type)."""

    def __init__(self, app, mime_type):
        self._app = app
        self._mime_type = mime_type

    def __str__(self):
        return "%s: %s" % (str(self._app), self._mime_type)

    def app(self):
        return self._app

    def mime_type(self):
        return self._mime_type

class SystemCatalog:
    def __init__(self):
        self._app_by_mime_type = {}   # list of app, by mime_type
        self._app_by_id = {}
        self._apps = set()
        self._read_desktop_files()
        get_system_mimeapps_list_files()

    def _read_desktop_files(self):
        datadirs = get_xdg("XDG_DATA_DIRS")
        applications_dirs = {}
        for datadir in datadirs:
            applications_dir = os.path.join(datadir, "applications")
            if os.path.exists(applications_dir):
                applications_dirs[applications_dir] = 1
        #print("looking in %s" % " ".join(applications_dirs.keys()))
        for applications_dir in applications_dirs.keys():
            for filename in os.listdir(applications_dir):
                if filename.endswith(".desktop"):
                    app = App(applications_dir, filename)
                    if app.type() == "Application" and app.n_mime_types() > 0:
                        self._register(app)
        self._all_sorted_apps = sorted(self._apps, key=lambda x: str(x))
        self._all_sorted_mime_types = sorted(self._app_by_mime_type.keys())
        #self.print_summary()

    def _register(self, app):
        if self._app_by_id.has_key(app.id()):
            sys.stderr.write("warning: ignoring duplicate app %s\n" % app.id())
        else:
            self._app_by_id[app.id()] = app
            self._apps.add(app)
            for mime_type in app.mime_types():
                if not self._app_by_mime_type.has_key(mime_type):
                    self._app_by_mime_type[mime_type] = []
                self._app_by_mime_type[mime_type].append(app)

    def print_summary(self):
        print("SystemCatalog: %d applications, %d mime types" % (len(self._apps), len(self._app_by_mime_type)))
        for app in sorted(self._apps):
            app.print_summary()

    def apps(self):
        return self._all_sorted_apps

    def app_by_id(self, app_id):
        if self._app_by_id.has_key(app_id):
            return self._app_by_id[app_id]
        else:
            sys.stderr.write("warning: ignoring unknown app %s\n" % app_id)
            return None

    def related_apps(self, app):
        """Return apps related to given one, i.e. with overlapping mime types."""
        apps = set()
        for mime_type in app.mime_types():
            for app in self._app_by_mime_type[mime_type]:
                apps.add(app)
        return apps

    def apps_for_mime_type(self, mime_type):
        """Return list of apps which support given mime type."""
        return self._app_by_mime_type[mime_type]

class UserCatalog(Observable):
    def __init__(self, system_catalog):
        Observable.__init__(self)
        self._system_catalog = system_catalog
        self._preferred_apps = []
        # added associations:
        self._whitelist = {} # (set of mime_type) by app
        self._whitelist_by_mime_type = {} # (set of app) by mime_type
        # removed associations:
        self._blacklist = {} # (set of mime_type) by app
        self._sorted_blacklist = None

        confighome = get_xdg("XDG_CONFIG_HOME")
        self._mimeapps_list_path = os.path.join(confighome, "mimeapps.list")
        self._read_mimeapps_list()

    def _read_mimeapps_list(self):
        section = "<nosection>"
        line_number = 0
        with open(self._mimeapps_list_path) as f:
            for line in f:
                line_number += 1
                line = line.strip()
                if line.startswith("["):
                    #print("%s: skip header: %s" % (desktop_basename, line))
                    section = line.lstrip("[").rstrip("]")
                elif line.startswith("#"):
                    #print("%s: skip comment: %s" % (desktop_basename, line))
                    pass
                elif line == "":
                    #print("%s: skip empty: %s." % (desktop_basename, line))
                    pass
                else:
                    tokens = line.split("=", 1)
                    if len(tokens) == 2:
                        mime_type = tokens[0]
                        app_ids = [app_id_from_desktop_basename(x) for x in tokens[1].rstrip(";").split(";")]
                        self._register(section, mime_type, app_ids)
                    else:
                        sys.stderr.write("ignoring weird line at %s:%d %s\n" % (self._mimeapps_list_path, line_number, line))
        self._remake_sorted_blacklist()

    def _register(self, section, mime_type, app_ids):
        if section == "Added Associations":
            for app_id in app_ids:
                app = self._system_catalog.app_by_id(app_id)
                if app is not None:
                    self.whitelist(app, mime_type)
        elif section == "Removed Associations":
            for app_id in app_ids:
                app = self._system_catalog.app_by_id(app_id)
                if app is not None:
                    self.blacklist(app, mime_type, remake=False)
        elif section == "Default Applications":
            # re-insert them in reverse order, which is as faithful an interpretation of fine-grained
            # preferences as this model supports
            for app_id in reversed(app_ids):
                app = self._system_catalog.app_by_id(app_id)
                if app is not None:
                    if app in self._preferred_apps:
                        self._preferred_apps.remove(app)
                    self._preferred_apps.insert(0, app)
        else:
            sys.stderr.write("warning: %s not mime-apps-spec compliant, ignoring %s: %s\n" % (section, mime_type, ';'.join(app_ids)))

    def save(self):
        with open(self._mimeapps_list_path, 'w') as f:
            written = False
            if len(self._preferred_apps) > 0:
                self._write_preferred_apps(f)
                written = True
            if len(self._whitelist) > 0:
                if written:
                    f.write("\n")
                self._write_whitelist(f)
                written = True
            if len(self._blacklist) > 0:
                if written:
                    f.write("\n")
                self._write_blacklist(f)

    def _write_mime_types(self, f, section, apps, mime_types_for_app_fn):
        f.write("[%s]\n" % section)
        app_by_mime_type = {}
        for app in apps:
            for mime_type in mime_types_for_app_fn(app):
                if not app_by_mime_type.has_key(mime_type):
                    app_by_mime_type[mime_type] = []
                app_by_mime_type[mime_type].append(app.desktop_basename())
        for mime_type in sorted(app_by_mime_type.keys()):
            f.write("%s=%s;\n" % (mime_type, ';'.join(app_by_mime_type[mime_type])))

    def _write_preferred_apps(self, f):
        self._write_mime_types(f,
                               "Default Applications",
                               self._preferred_apps,
                               lambda x: x.mime_types())

    def _write_whitelist(self, f):
        self._write_mime_types(f,
                               "Added Associations",
                               sorted(self._whitelist.keys(), key=lambda x: x.desktop_basename()),
                               lambda x: self._whitelist[x])

    def _write_blacklist(self, f):
        self._write_mime_types(f,
                               "Removed Associations",
                               sorted(self._blacklist.keys(), key=lambda x: x.desktop_basename()),
                               lambda x: self._blacklist[x])

    def get_preferred_apps(self):
        return self._preferred_apps

    def add_preference(self, app):
        if app not in self._preferred_apps:
            self._preferred_apps.append(app)
        self.notify("preferred_apps")

    def remove_preference(self, app):
        if app in self._preferred_apps:
            self._preferred_apps.remove(app)
        self.notify("preferred_apps")

    def shift_preference(self, app, other_app):
        """Move prefered app just above or just below other_app."""
        if app in self._preferred_apps and other_app in self._preferred_apps:
            i_app = self._preferred_apps.index(app)
            i_other_app = self._preferred_apps.index(other_app)
            del self._preferred_apps[i_app]
            self._preferred_apps.insert(i_other_app, app)
            self.notify("preferred_apps")

    def whitelist(self, app, mime_type, remake = True):
        print("whitelist %s: %s" % (app, mime_type))
        if not self._whitelist.has_key(app):
            self._whitelist[app] = set()
        self._whitelist[app].add(mime_type)
        if not self._whitelist_by_mime_type.has_key(mime_type):
            self._whitelist_by_mime_type[mime_type] = set()
        self._whitelist_by_mime_type[mime_type].add(app)

    def get_whitelist(self, app):
        if self._whitelist.has_key(app):
            return self._whitelist[app]
        else:
            return set()

    def get_whitelist_by_mime_type(self, mime_type):
        if self._whitelist_by_mime_type.has_key(mime_type):
            return self._whitelist_by_mime_type[mime_type]
        else:
            return set()

    def _remake_sorted_blacklist(self):
        blacklist = []
        for app in self._blacklist.keys():
            for mime_type in self._blacklist[app]:
                blacklist.append(AppMimetype(app, mime_type))
        self._sorted_blacklist = sorted(blacklist, key=lambda x: str(x))
        self.notify("blacklist")

    def blacklist(self, app, mime_type, remake = True):
        #print("blacklist %s: %s" % (app, mime_type))
        if not self._blacklist.has_key(app):
            self._blacklist[app] = set()
        self._blacklist[app].add(mime_type)
        if remake:
            self._remake_sorted_blacklist()

    def unblacklist(self, app_mime_type):
        app = app_mime_type.app()
        mime_type = app_mime_type.mime_type()
        #print("unblacklist %s:%s" % (app, mime_type))
        if self._blacklist.has_key(app) and mime_type in self._blacklist[app]:
            self._blacklist[app].remove(mime_type)
            if len(self._blacklist[app]) == 0:
                del self._blacklist[app]
        self._remake_sorted_blacklist()

    def get_blacklist(self):
        return self._sorted_blacklist

    def blacklisted_mime_types(self, app):
        if not self._blacklist.has_key(app):
            return set()
        else:
            return self._blacklist[app]

class Lens(Observable):
    """Lens provides a view of the catalog, etc., filtered by selected app/mime-type"""

    def __init__(self, system_catalog, user_catalog):
        Observable.__init__(self)
        self._system_catalog = system_catalog
        self._user_catalog = user_catalog
        self._selected_app = None
        self._selected_mime_type = None
        self._promiscuous_apps = []
        self._promiscuous_mime_types = []
        self._determine_promiscuity()
        self._filter_apps_mime_types()
        self._user_catalog.observe("preferred_apps", self._filter_preferred_apps)
        self._user_catalog.observe("blacklist", self._blacklist_changed)

    def _determine_promiscuity(self):
        """Promiscuous mime types are those supported by multiple apps.
        Promiscuous apps are those supporting any promiscuous mime type."""
        apps_by_mime_type = {}
        for app in self._system_catalog.apps():
            for m in app.mime_types() | self._user_catalog.get_whitelist(app):
                if not apps_by_mime_type.has_key(m):
                    apps_by_mime_type[m] = []
                apps_by_mime_type[m].append(app)
        promiscuous_apps_set = set()
        promiscuous_mime_types_set = set()
        for mime_type in apps_by_mime_type.keys():
            if len(apps_by_mime_type[mime_type]) > 1:
                promiscuous_mime_types_set.add(mime_type)
        self._promiscuous_mime_types = sorted(promiscuous_mime_types_set)
        for m in self._promiscuous_mime_types:
            if len(apps_by_mime_type[m]) > 1:
                for app in apps_by_mime_type[m]:
                    promiscuous_apps_set.add(app)
        self._promiscuous_apps = sorted(list(promiscuous_apps_set), key=lambda x: str(x))

    def _app_mime_types(self, app):
        return (app.mime_types() | self._user_catalog.get_whitelist(app)) - self._user_catalog.blacklisted_mime_types(app)

    def _filter_apps_mime_types(self):
        """Filtered apps/mime_types are the promiscuous ones, filtered by
        which ones support/are supported by the selected app/mime_type."""
        #print("Lens::_filter_apps_mime_types()")
        # mime types
        if self._selected_app == None:
            self._filtered_mime_types = self._promiscuous_mime_types
        else:
            self._filtered_mime_types = [x for x in self._promiscuous_mime_types if x in self._app_mime_types(self._selected_app)]

        # apps
        if self._selected_mime_type == None:
            self._filtered_apps = [x for x in self._promiscuous_apps if len(set(self._filtered_mime_types) & self._app_mime_types(x)) > 0]
        else:
            self._filtered_apps = [x for x in self._promiscuous_apps if self._selected_mime_type in self._app_mime_types(x)]
        self.notify("apps")
        self.notify("mime_types")

    def _filter_preferred_apps(self):
        #print("Lens::_filter_preferred()")
        if self._selected_mime_type == None:
            self._filtered_preferred_apps = [x for x in self._user_catalog.get_preferred_apps() if len(set(self._filtered_mime_types) & self._app_mime_types(x)) > 0]
        else:
            self._filtered_preferred_apps = [x for x in self._user_catalog.get_preferred_apps() if self._selected_mime_type in self._app_mime_types(x)]
        self.notify("preferred_apps")

    def _filter_blacklist(self):
        #print("Lens::_filter_blacklist()")
        if self._selected_mime_type == None:
            self._filtered_blacklist = [x for x in self._user_catalog.get_blacklist() if x.mime_type() in self._filtered_mime_types]
        else:
            self._filtered_blacklist = [x for x in self._user_catalog.get_blacklist() if x.mime_type() == self._selected_mime_type]
        self.notify("blacklist")

    def _blacklist_changed(self):
        self._filter_blacklist()
        self._filter_apps_mime_types()

    def select_app(self, app):
        """Select, or unselect if app is None."""
        #print("Lens::select_app(%s)" % str(app))
        self._selected_app = app
        self._filter_apps_mime_types()
        self._filter_preferred_apps()
        self._filter_blacklist()

    def selected_app(self):
        return self._selected_app

    def select_mime_type(self, mime_type):
        self._selected_mime_type = mime_type
        self._filter_apps_mime_types()
        self._filter_preferred_apps()
        self._filter_blacklist()

    def selected_mime_type(self):
        return self._selected_mime_type

    def filtered_apps(self):
        return self._filtered_apps

    def filtered_mime_types(self):
        return self._filtered_mime_types

    def filtered_preferred_apps(self):
        return self._filtered_preferred_apps

    def filtered_blacklist(self):
        return self._filtered_blacklist

    def _shift_preference(self, app, offset):
        if app in self._filtered_preferred_apps:
            i = self._filtered_preferred_apps.index(app)
            if i + offset >= 0 and i + offset < len(self._filtered_preferred_apps):
                self._user_catalog.shift_preference(app, self._filtered_preferred_apps[i + offset])

    def raise_preference(self, app):
        self._shift_preference(app, -1)

    def lower_preference(self, app):
        self._shift_preference(app, 1)

class SmartList(Tkinter.Frame):
    def __init__(self, master, height, width, selectfn):
        Tkinter.Frame.__init__(self, master)
        self._items = []
        self._selected_index = None
        self.selectfn = selectfn
        self.scrollbar = Tkinter.Scrollbar(self, orient=Tkinter.VERTICAL)
        self.listbox = Tkinter.Listbox(self, selectmode=Tkinter.BROWSE, height=height, width=width, yscrollcommand=self.scrollbar.set, exportselection=0)
        self.listbox.bind("<<ListboxSelect>>", self._select)
        self.listbox.grid(row=0, column=0)
        self.scrollbar.config(command=self.listbox.yview)
        self.scrollbar.grid(row=0, column=1, sticky=Tkinter.N + Tkinter.S)

    def _select(self, e):
        """Callback for select or unselect."""
        i = int(e.widget.curselection()[0])
        if i == self._selected_index:
            self._selected_index = None
            self.listbox.selection_clear(i)
        else:
            self._selected_index = i
        if self.selectfn is not None:
            #print("SmartList::_select(%s, %s)" % (self.selected_item(), self._selected_index))
            self.selectfn(self.selected_item(), self._selected_index)

    def highlight(self, item):
        if item is None or item not in self._items:
            self._unhighlight()
        else:
            i = self._items.index(item)
            self._highlight_by_index(i)

    def _unhighlight(self):
        for i in [int(s) for s in self.listbox.curselection()]:
            self.listbox.selection_clear(i)
        self._selected_index = None

    def _highlight_by_index(self, i):
        """Select the given index."""
        self._unhighlight()
        self._selected_index = i
        self.listbox.selection_set(i)
        self.listbox.see(i)

    def populate(self, items):
        #print("populate(%s), index is %s of %s" % (','.join([str(x) for x in items]), str(self._selected_index), ','.join([str(x) for x in self._items])))
        self.listbox.delete(0, Tkinter.END)
        selection_lost = False
        if self._selected_index is not None:
            # preserve the selection if it occurs in the new list
            currently_selected_item = self._items[self._selected_index]
            self._unhighlight()
            if currently_selected_item in items:
                self._selected_index = items.index(currently_selected_item)
            else:
                self._selected_index = None
                selection_lost = True
        self._items = items
        for item in self._items:
            self.listbox.insert(Tkinter.END, str(item))
        if self._selected_index is not None:
            self._highlight_by_index(self._selected_index)
        elif selection_lost and self.selectfn is not None:
            self.selectfn(None, None)

    def selected_item(self):
        if self._selected_index is not None:
            return self._items[self._selected_index]
        else:
            return None

    def selected_index(self):
        return self._selected_index

    def n_items(self):
        return len(self._items)

class ButtonBox(Tkinter.Frame):
    """A set of buttons, initially disabled."""

    def __init__(self, master, labels, callback_fn):
        Tkinter.Frame.__init__(self, master)
        self._callback_fn = callback_fn
        self._buttons = []
        for i in range(len(labels)):
            self._buttons.append(Tkinter.Button(self, text=labels[i], state=Tkinter.DISABLED, command=lambda index=i: self._callback_fn(index)))
            self._buttons[-1].grid(row=0, column=i)

    def set_enabled(self, enabled):
        #print("set_enabled(%s)" % str(enabled))
        for i in range(len(self._buttons)):
            self._buttons[i].configure(state = Tkinter.NORMAL if enabled[i] else Tkinter.DISABLED)

class MyApp:
    def __init__(self, root):
        self.root = root
        self.frame = Tkinter.Frame(self.root)

        self.root.protocol("WM_DELETE_WINDOW", self.request_close)

        self.system_catalog = SystemCatalog()
        self.user_catalog = UserCatalog(self.system_catalog)
        self.lens = Lens(self.system_catalog, self.user_catalog)
        self.dirty = False

        nextrow = 0

        self.apps_label = Tkinter.Label(self.frame, text = "Applications")
        self.apps_label.grid(row = nextrow, column = 0)
        self.mime_types_label = Tkinter.Label(self.frame, text = "Mime Types")
        self.mime_types_label.grid(row = nextrow, column = 1)
        nextrow += 1

        listbox_width = [46, 70]
        listbox_height = [30, 10]
        self.apps_smartlist = SmartList(self.frame, height=listbox_height[0], width=listbox_width[0], selectfn=self.select_from_apps)
        self.lens.observe("apps", lambda: self.apps_smartlist.populate(self.lens.filtered_apps()))
        self.apps_smartlist
        self.apps_smartlist.grid(row=nextrow, column=0)
        self.mime_types_smartlist = SmartList(self.frame, height=listbox_height[0], width=listbox_width[1], selectfn=self.select_from_mime_types)
        self.lens.observe("mime_types", lambda: self.mime_types_smartlist.populate(self.lens.filtered_mime_types()))
        self.mime_types_smartlist.grid(row=nextrow, column=1)
        nextrow += 1

        self.app_buttonbox = ButtonBox(self.frame, ["Prefer", "Remove"], self.app_button_pressed)
        self.app_buttonbox.grid(row=nextrow, column=0)
        self.mime_type_buttonbox = ButtonBox(self.frame, ["Blacklist", "Unblacklist"], self.mime_type_button_pressed)
        self.mime_type_buttonbox.grid(row=nextrow, column=1)
        nextrow += 1

        self.preferred_buttonbox = ButtonBox(self.frame, ["+", "-"], self.preferred_button_pressed)
        self.preferred_buttonbox.grid(row=nextrow, column=0)
        nextrow += 1

        self.preferred_label = Tkinter.Label(self.frame, text = "Preferred Applications")
        self.preferred_label.grid(row = nextrow, column = 0)
        self.blacklist_label = Tkinter.Label(self.frame, text = "Blacklisted Mime Types")
        self.blacklist_label.grid(row = nextrow, column = 1)
        nextrow += 1

        self.preferred_smartlist = SmartList(self.frame, height=listbox_height[1], width=listbox_width[0], selectfn=self.select_from_apps)
        self.lens.observe("preferred_apps", lambda: self.preferred_smartlist.populate(self.lens.filtered_preferred_apps()))
        self.preferred_smartlist.grid(row=nextrow, column=0)

        self.blacklist_smartlist = SmartList(self.frame, height=listbox_height[1], width=listbox_width[1], selectfn=self.select_from_blacklist)
        self.lens.observe("blacklist", lambda: self.blacklist_smartlist.populate(self.lens.filtered_blacklist()))
        self.blacklist_smartlist.grid(row=nextrow, column=1)
        nextrow += 1

        self.save_button = Tkinter.Button(self.frame, text="Save", state=Tkinter.DISABLED, command=self.save_pressed)
        self.save_button.grid(row=nextrow, column=0)
        nextrow += 1

        self.frame.pack()

    def app_button_pressed(self, b):
        #print("app_button_pressed(%d)" % (b))
        if b == 0:
            # Prefer
            app = self.lens.selected_app()
            self.user_catalog.add_preference(app)
            self.preferred_smartlist.highlight(app)
        else:
            # Remove
            app = self.lens.selected_app()
            self.user_catalog.remove_preference(app)
        self.dirty = True
        self.enable_disable_buttons()

    def mime_type_button_pressed(self, b):
        #print("mime_type_button_pressed(%d)" % (b))
        if b == 0:
            # Blacklist
            app = self.lens.selected_app()
            mime_type = self.lens.selected_mime_type()
            self.user_catalog.blacklist(app, mime_type)
        else:
            # Unblacklist
            self.user_catalog.unblacklist(self.blacklist_smartlist.selected_item())
        self.dirty = True
        self.enable_disable_buttons()

    def preferred_button_pressed(self, b):
        #print("preferred_button_pressed(%d)" % (b))
        if b == 0:
            # +
            app = self.lens.selected_app()
            self.lens.raise_preference(app)
        else:
            # -
            app = self.lens.selected_app()
            self.lens.lower_preference(app)
        self.dirty = True
        self.enable_disable_buttons()

    def save_pressed(self):
        self.user_catalog.save()
        self.dirty = False
        self.enable_disable_buttons()

    def select_from_apps(self, app, i):
        #print("select_from_apps %s: %s" % (str(i), str(app)))
        self.apps_smartlist.highlight(app)
        self.preferred_smartlist.highlight(app)
        self.lens.select_app(app)
        self.enable_disable_buttons()

    def select_from_mime_types(self, mime_type, i):
        #print("select_from_mime_types %s: %s" % (str(i), str(mime_type)))
        self.lens.select_mime_type(mime_type)
        self.enable_disable_buttons()

    def select_from_blacklist(self, app_mime_type, i):
        self.enable_disable_buttons()

    def enable_disable_buttons(self):
        """Enable/disable buttons according to what is selected."""
        self.app_buttonbox.set_enabled([self.apps_smartlist.selected_item() is not None and self.apps_smartlist.selected_item() != self.preferred_smartlist.selected_item(),
                                        self.preferred_smartlist.selected_item() is not None])
        n_preferred = self.preferred_smartlist.n_items()
        preferred_index = self.preferred_smartlist.selected_index()
        self.preferred_buttonbox.set_enabled([preferred_index is not None and preferred_index > 0,
                                              preferred_index is not None and preferred_index < n_preferred - 1])
        self.mime_type_buttonbox.set_enabled([self.apps_smartlist.selected_item() is not None and self.mime_types_smartlist.selected_item() is not None,
                                              self.blacklist_smartlist.selected_item() is not None])
        self.save_button.configure(state = Tkinter.NORMAL if self.dirty else Tkinter.DISABLED)

    def request_close(self):
        """Handle window close event."""
        if self.dirty:
            if tkMessageBox.askokcancel("Quit",
                                        "Unsaved state.  Really quit?",
                                        default=tkMessageBox.CANCEL,
                                        icon=tkMessageBox.WARNING):
                self.root.destroy()
        else:
            self.root.destroy()

def main():
    root = Tkinter.Tk()
    root.wm_title("mime-apps-preferences")
    app = MyApp(root)
    root.mainloop()

if __name__ == '__main__':
    main()
